{"version":3,"sources":["discord/classes/DiscordChannel.ts","discord/classes/DiscordRole.ts","discord/classes/DiscordGuild.ts","discord/ws/handlers/READY.ts"],"names":["DiscordChannelManager","guild","client","channelCountWithoutThreads","name","a","id","this","loaded","data","channels","forEach","c","cache","set","resolve","_fetch","CachedManager","DiscordRoleManager","roles","r","i","DiscordRole","rawPosition","deleted","editable","color","DiscordClient","getCreatedAt","hoist","managed","mentionable","position","tags","role","resolved","channel","permissions","role1","role2","comparePositionTo","DiscordGuild","_afkChannel","bans","commands","emojis","ivites","_me","members","partnered","presences","_roles","_rulesChannel","stageInstances","stickers","_systemChannel","verified","voiceAdapterCreator","voiceStates","ownerCache","features","includes","DiscordMemberManager","afk_channel_id","afk_timeout","timeout","banner","default_message_notifications","description","discovery_splash","explicit_content_filter","icon","joined_at","large","max_members","member_count","mfa_level","split","map","w","toUpperCase","join","nsfw_level","owner_id","preferred_locale","premium_subscription_count","premium_tier","public_updates_channel_id","rules_channel_id","splash","system_channel_flags","system_channel_id","vanity_url_code","verification_level","options","DISCORD_IMAGE_BASE_URL","parseStaticImageURLOptions","discoverySplash","positions","notifications","filter","owner","locale","flags","level","settings","onReady","d","console","log","ws","sessionId","session_id","user","guilds","guildPositions","user_settings","guild_positions","length","temp","index","guildIndex","findIndex","g","unshift","setGuilds","username","discriminator","emit"],"mappings":"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","file":"static/js/6.3462d542.chunk.js","sourcesContent":["import { DiscordChannelBase } from \"../discord-classes\";\nimport { DiscordGuild } from \"./DiscordGuild\";\nimport { CachedManager } from \"./util\";\nimport { DiscordClient } from \"../DiscordClient\";\n\nexport class DiscordChannelManager extends CachedManager<DiscordChannelBase> {\n    channelCountWithoutThreads = 0\n    \n    readonly guild: DiscordGuild\n\n\n    async create(name: string) {\n        return null // GuildChannel\n    }\n\n    private _fetch(id?: string) {\n        if (!this.loaded) {\n            this.guild.data.channels.forEach(c => {\n                this.cache.set(c.id, c)\n            })\n            this.loaded = true\n        }\n        if (!id) return this.cache\n        return this.resolve(id) ?? null\n    }\n\n    fetchAll() {\n        return this._fetch() as Map<string, DiscordChannelBase>\n    }\n\n    fetch(id: string) {\n        return this._fetch(id) as DiscordChannelBase | null\n    }\n\n    async fetchActiveThreads() {\n        return null // FetchedThreads\n    }\n\n\n    constructor(guild: DiscordGuild) {\n        super(guild.client)\n\n        this.guild = guild\n    }\n}\n\nexport class DiscordChannel {\n    readonly client: DiscordClient\n    readonly data: DiscordChannelData\n\n    get createdAt() { return DiscordClient.getCreatedAt(this) }\n\n    deleted = false\n\n    readonly id: string\n\n    get type() { return this.data.type }\n\n\n    async delete() {\n        return this\n    }\n\n    isGuildChannel(): this is DiscordGuildChannel {\n        return this.type === 0 || this.type === 5 || this.isVoice() === true || this.isThread() === true || this.isStore()\n    }\n\n    isStore(): this is DiscordStoreChannel {\n        return this.type === 6\n    }\n\n    isText(): this is DiscordTextBasedChannel {\n        return this.type === 0 || this.type === 1 || this.type === 3 || this.type === 5 || this.isThread()\n    }\n\n    isThread(): this is DiscordThreadChannel {\n        return this.type === 10 || this.type === 11 || this.type === 12\n    }\n\n    isVoice(): this is DiscordVoiceChannel {\n        return this.type === 2 || this.type === 13\n    }\n\n\n\n\n    constructor(client: DiscordClient, data: DiscordChannelData) {\n        this.client = client\n        this.data = data\n\n        this.id = data.id\n    }\n}\n\nexport class DiscordGuildChannel extends DiscordChannel {\n    readonly guild: DiscordGuild\n\n    \n\n    constructor(guild: DiscordGuild, data: DiscordChannelData) {\n        super(guild.client, data)\n\n        this.guild = guild\n    }\n}\n\nexport interface DiscordTextBasedChannel {\n\n}\n\nexport interface DiscordThreadChannel {\n\n}\n\nexport interface DiscordVoiceChannel {\n\n}\n\nexport class DiscordStoreChannel extends DiscordGuildChannel {\n\n}\n\nexport interface DiscordChannelData {\n    id: string\n\n    type: number\n}","import { DiscordChannelBase } from \"../discord-classes\";\nimport { DiscordClient } from \"../DiscordClient\";\nimport { DiscordGuild } from \"./DiscordGuild\";\nimport { CachedManager } from \"./util\";\n\nexport class DiscordRoleManager extends CachedManager<DiscordRole> {\n    readonly guild: DiscordGuild\n\n    constructor(guild: DiscordGuild) {\n        super(guild.client)\n        this.guild = guild\n\n        this.guild.data.roles.forEach((r, i) => {\n            this.cache.set(r.id, new DiscordRole(this.guild, r, i))\n        })\n        this.loaded = true\n    }\n}\n\nexport class DiscordRole {\n    readonly client: DiscordClient\n    readonly guild: DiscordGuild\n    readonly data: DiscordRoleData\n\n    readonly id: string\n\n    get color() { return this.data.color }\n\n    get createdAt() { return DiscordClient.getCreatedAt(this) }\n\n    deleted = false\n\n    editable: undefined // boolean\n\n    get hoist() { return this.data.hoist }\n\n    get managed() { return this.data.managed }\n\n    get mentionable() { return this.data.mentionable }\n\n    get name() { return this.data.name }\n\n    get position() { return this.data.position }\n\n    readonly rawPosition: number\n\n    get tags() { return this.data.tags }\n\n\n    comparePositionTo(role: DiscordRole | string) {\n        const resolved = typeof role === 'string' ? null : role\n        if (!resolved) return 0 // TODO\n        return this.position - resolved.position\n    }\n\n    async delete() {\n        return this\n    }\n\n    async edit(data: Partial<DiscordRoleEditData>) {\n        return this\n    }\n\n    permissionsIn(channel: DiscordChannelBase | string) {\n        return null // Readonly<Permissions>\n    }\n\n    async setColor(color: number) {\n        return this\n    }\n\n    async setHoist(hoist: boolean) {\n        return this\n    }\n\n    async setMentionable(mentionable: boolean) {\n        return this\n    }\n\n    async setName(name: string) {\n        return this\n    }\n\n    async setPermissions(permissions: null /*PermissionResolvable*/) {\n        return this\n    }\n\n    async setPosition(position: number) {\n        return this\n    }\n\n    toString() {\n        return `<@&${this.id}>`\n    }\n\n\n    static comparePositions(role1: DiscordRole, role2: DiscordRole) {\n        return role1.comparePositionTo(role2)\n    }\n\n\n    constructor(guild: DiscordGuild, data: DiscordRoleData, rawPosition: number) {\n        this.guild = guild\n        this.client = this.guild.client\n        this.data = data\n        this.rawPosition = rawPosition\n\n        this.id = data.id\n    }\n}\n\nexport interface DiscordRoleData {\n    tags?: {\n        botId?: string\n        integrationId?: string\n        premiumSubscriberRole?: true\n    }\n    position: number\n    permissions: string\n    name: string\n    mentionable: boolean\n    managed: boolean\n    id: string\n    icon: string | null\n    hoist: boolean\n    color: number\n}\n\ninterface DiscordRoleEditData {\n\n}","import { DiscordChannel, DiscordChannelBase } from \"../discord-classes\";\nimport { DiscordClient } from \"../DiscordClient\";\nimport { DiscordChannelManager } from \"./DiscordChannel\";\nimport { DiscordMemberManager } from \"./DiscordMember\";\nimport { DiscordRole, DiscordRoleData, DiscordRoleManager } from \"./DiscordRole\";\nimport { DISCORD_IMAGE_BASE_URL, parseStaticImageURLOptions, StaticImageURLOptions } from \"./util\";\n\nexport class DiscordGuild {\n    client: DiscordClient\n    data: DiscordGuildData\n\n    private _afkChannel: DiscordChannel<4> | undefined\n    get afkChannel(): DiscordChannel<4> | null {\n        if (this._afkChannel) return this._afkChannel\n        return null // TODO\n    }\n\n    get afkChannelId() { return this.data.afk_channel_id }\n    set afkChannelId(id: string | null) {\n        this.data.afk_channel_id = id\n        // TODO\n    }\n\n    get afkTimeout() { return this.data.afk_timeout }\n    set afkTimeout(timeout: number | null) {\n        this.data.afk_timeout = timeout\n        // TODO\n    }\n\n    get banner() { return this.data.banner }\n    set banner(banner: string | null) {\n        this.data.banner = banner\n        // TODO\n    }\n\n    bans: undefined // GuildBanManager\n\n    readonly channels: DiscordChannelManager\n\n    commands: undefined // GuildApplicationCommandManager\n\n    get createdAt() { return DiscordClient.getCreatedAt(this) }\n\n    get defaultMessageNotifications() { return this.data.default_message_notifications }\n    // set\n\n    get description() { return this.data.description }\n    // set\n\n    get discoverySplash() { return this.data.discovery_splash }\n    // set\n\n    emojis: undefined // GuildEmojiManager\n\n    get explicitContentFilter() { return this.data.explicit_content_filter }\n    // set\n\n    get features() { return this.data.features }\n\n    get icon() { return this.data.icon }\n    // set\n\n    readonly id: string\n\n    ivites: undefined // GuildInviteManager\n\n    get joinedAt() { return this.data.joined_at }\n\n    get large() { return this.data.large }\n\n    get maximumMembers() { return this.data.max_members }\n\n    private _me: any | undefined\n    get me(): any {\n        if (this._me) return this._me\n        return null // TODO\n    }\n\n    get memberCount() { return this.data.member_count }\n\n    members: DiscordMemberManager\n\n    get mfaLevel() { return this.data.mfa_level }\n    // set\n\n    get name() { return this.data.name }\n    // set\n\n    get nameAcronym() { return this.name.split(' ').map(w => w[0].toUpperCase()).join('') }\n\n    get nsfwLevel() { return this.data.nsfw_level }\n    // set\n\n    get ownerId() { return this.data.owner_id }\n    // set\n\n    partnered: boolean\n\n    get preferredLocale() { return this.data.preferred_locale }\n    // set\n\n    get premiumSubscriptionCount() { return this.data.premium_subscription_count }\n\n    get premiumTier() { return this.data.premium_tier }\n\n    presences: undefined // PresenceManager\n\n    get publicUpdatesChannelId() { return this.data.public_updates_channel_id }\n    // set\n\n    private _roles: DiscordRoleManager | undefined\n    get roles() {\n        if (this._roles) return this._roles\n        return this._roles = new DiscordRoleManager(this)\n    }\n\n    private _rulesChannel: DiscordChannel<0> | undefined\n    get rulesChannel(): DiscordChannel<0> | null {\n        if (this._rulesChannel) return this._rulesChannel\n        return null // TODO\n    }\n\n    get rulesChannelId() { return this.data.rules_channel_id }\n    // set\n\n    get splash() { return this.data.splash }\n\n    stageInstances: undefined // StageInstanceManager\n\n    stickers: undefined // GuildStickerManager\n\n    private _systemChannel: DiscordChannel<0> | undefined\n    get systemChannel(): DiscordChannel<0> | null {\n        if (this._systemChannel) return this._systemChannel\n        return null // TODO\n    }\n\n    get systemChannelFlags() { return this.data.system_channel_flags }\n\n    get systemChannelId() { return this.data.system_channel_id }\n    // set\n\n    get vanityUrlCode() { return this.data.vanity_url_code }\n\n    // vanityUrlUses\n\n    get verificationLevel() { return this.data.verification_level }\n    // set\n\n    verified: boolean\n\n    voiceAdapterCreator: undefined | (() => undefined) // VoicaAdapter\n\n    voiceStates: undefined // VoiceStateManager\n\n    get widgetChannel() {\n        //TODO\n        return undefined\n    }\n\n    get widgetChannelId() { return undefined }\n    // set\n\n    get widgetEnabled() { return undefined }\n    // set\n\n\n    bannerURL(options?: Partial<StaticImageURLOptions>) {\n        return this.banner ? `${DISCORD_IMAGE_BASE_URL}/banners/${this.id}/${this.banner}${parseStaticImageURLOptions(options)}` : null\n    }\n\n    async createTemplate(name: string, description?: string) {\n        return null // GuildTemplate\n    }\n\n    async delete() {\n        return this\n    }\n\n    discoverySplashURL(options?: Partial<StaticImageURLOptions>) {\n        return this.discoverySplash ? `${DISCORD_IMAGE_BASE_URL}/discovery-splashes/${this.id}/${this.discoverySplash}${parseStaticImageURLOptions(options)}` : null\n    }\n\n    async edit(data: Partial<DiscordGuildEditData>) {\n        return this\n    }\n\n    async editWelcomeScreen(data: Partial<{\n        enabled: boolean\n        description: string\n        welcomeChannels: any[]\n    }>) {\n        return null // WelcomeScreen\n    }\n\n    async fetchAuditLogs(options: {} = {}) {\n        return null // GuildAuditLogs\n    }\n\n    async fetchIntegrations() {\n        return null // Map<string, Integration>\n    }\n\n    private ownerCache: any | undefined\n    async fetchOwner() {\n        return null // GuildMember\n    }\n\n    async fetchPreview() {\n        return null // GuildPreview\n    }\n\n    async fetchTemplates() {\n        return null // Map<string, GuildTemplate>\n    }\n\n    async fetchVanityData() {\n        return null // Vanity\n    }\n\n    async fetchWebhooks() {\n        return null // Map<string, Webhook>\n    }\n\n    async fetchWelcomeScreen() {\n        return null // WelcomeScreen\n    }\n\n    async fetchWidget() {\n        return null // Widget\n    }\n\n    async fetchWidgetSettings() {\n        return null // GuildWidgetSettings\n    }\n\n    iconURL(options?: Partial<StaticImageURLOptions>) {\n        return this.icon ? `${DISCORD_IMAGE_BASE_URL}/icons/${this.id}/${this.icon}${parseStaticImageURLOptions(options)}` : null\n    }\n\n    async leave() {\n        return this\n    }\n\n    async setAFKChannel(channel: DiscordChannel<4> | string) {\n        return this\n    }\n\n    async setBanner(banner: string) {\n        return this\n    }\n\n    async setChannelPositions(positions: Array<{ channel: DiscordChannelBase | string, position?: number, parent?: DiscordChannel<4> | string, lockPermissions?: boolean }>) {\n        return this\n    }\n\n    async setDefaultMessageNotifications(notifications: number) {\n        return this\n    }\n\n    async setDiscoverySplash(splash: string) {\n        return this\n    }\n\n    async setExplicitContentFilter(filter: string) {\n        return this\n    }\n\n    async setIcon(icon: string) {\n        return this\n    }\n\n    async setName(name: string) {\n        return this\n    }\n\n    async setOwner(owner: any | string) {\n        return this\n    }\n\n    async setPreferredLocale(locale: string) {\n        return this\n    }\n\n    async setPublicUpdatesChannel(channel: DiscordChannel<0> | string) {\n        return this\n    }\n\n    async setRolePositions(positions: Array<{ role: DiscordRole | string, position: number }>) {\n        return this\n    }\n\n    async setRulesChannel(channel: DiscordChannel<0> | string) {\n        return this\n    }\n\n    async setSplash(splash: string) {\n        return this\n    }\n\n    async setSystemChannel(channel: DiscordChannel<0> | string) {\n        return this\n    }\n\n    async setSystemChannelFlags(flags: number) {\n        return this\n    }\n\n    async setVerificationLevel(level: number) {\n        return this\n    }\n\n    async setWidgetSettings(settings: { enabled: boolean, channel: DiscordChannelBase | string | null }) {\n        return this\n    }\n\n    async splashURL(options?: Partial<StaticImageURLOptions>) {\n        return this.splash ? `${DISCORD_IMAGE_BASE_URL}/splashes/${this.id}/${this.splash}${parseStaticImageURLOptions(options)}` : null\n    }\n\n    toString() {\n        return this.name\n    }\n\n\n    constructor(client: DiscordClient, data: DiscordGuildData) {\n        this.client = client\n        this.data = data\n        \n        this.id = data.id\n        this.partnered = this.features.includes('PARTNERED')\n        this.verified = this.features.includes('VERIFIED')\n\n        this.channels = new DiscordChannelManager(this)\n        this.members = new DiscordMemberManager(this)\n    }\n}\n\nexport interface DiscordGuildData {\n    default_message_notifications: number\n    afk_channel_id: string | null\n    public_updates_channel_id: string | null\n    name: string\n    region: string\n    stickers: any[]\n    banner: string | null\n    description: string | null\n    splash: string | null\n    discovery_splash: string | null\n    preferred_locale: string | null\n    application_id: any | null\n    channels: DiscordChannelBase[]\n    mfa_level: number\n    guild_scheduled_events: any[]\n    icon: string | null\n    large: boolean\n    explicit_content_filter: number\n    lazy: boolean\n    joined_at: string\n    system_channel_id: string | null\n    premium_tier: number\n    verification_level: number\n    owner_id: string\n    max_video_channel_users: number\n    vanity_url_code: string | null\n    threads: any[]\n    member_count: number\n    nsfw_level: number\n    features: DiscordGuildFeature[]\n    application_command_counts: any\n    afk_timeout: number | null\n    application_command_count: number\n    id: string\n    nsfw: boolean\n    stage_instances: any[]\n    rules_channel_id: string | null\n    system_channel_flags: number\n    max_members: number\n    roles: DiscordRoleData[]\n    premium_subscription_count: number\n    guild_hashes: any\n    emojis: any[]\n}\n\ntype DiscordGuildFeature =\n    | 'ANIMATED_ICON'\n    | 'BANNER'\n    | 'COMMERCE'\n    | 'COMMUNITY'\n    | 'DISCOVERABLE'\n    | 'ENABLED_DISCOVERABLE_BEFORE'\n    | 'FEATURABLE'\n    | 'INVITE_SPLASH'\n    | 'MEMBER_VERIFICATION_GATE_ENABLED'\n    | 'MONETIZATION_ENABLED'\n    | 'MORE_STICKERS'\n    | 'NEWS'\n    | 'NEW_THREAD_PERMISSIONS'\n    | 'PARTNERED'\n    | 'PREVIEW_ENABLED'\n    | 'PRIVATE_THREADS'\n    | 'ROLE_ICONS'\n    | 'SEVEN_DAY_THREAD_ARCHIVE'\n    | 'THREADS_ENABLED'\n    | 'THREE_DAY_THREAD_ARCHIVE'\n    | 'TICKETED_EVENTS_ENABLED'\n    | 'VANITY_URL'\n    | 'VERIFIED'\n    | 'VIP_REGIONS'\n    | 'WELCOME_SCREEN_ENABLED'\n\ninterface DiscordGuildEditData {\n    name: string\n    // TODO\n}","import { setGuilds } from \"../../../guildsbar/Guilds\";\nimport { DiscordGuild } from \"../../classes/DiscordGuild\";\nimport { DiscordUserPartial } from \"../../discord-classes\";\nimport { DiscordClient } from \"../../DiscordClient\";\n\nexport default function onReady(client: DiscordClient, d: {\n    session_id: string\n    user: {\n        username: string\n        discriminator: string\n    }\n    guilds: any[]\n    users: DiscordUserPartial[]\n    user_settings: {\n        guild_positions: string[]\n    }\n}) {\n    console.log(d);\n\n    client.ws.sessionId = d.session_id\n\n    const user = d.user\n\n    client.user = user as any\n    console.log(client.user)\n\n    let guilds: DiscordGuild[] = d.guilds.map(data => new DiscordGuild(client, data))\n\n    const guildPositions = d.user_settings.guild_positions\n    if (guildPositions.length !== 0) {\n        const temp: DiscordGuild[] = []\n        guildPositions.forEach((id, index) => {\n            const guildIndex = guilds.findIndex(g => g.id === id)\n            if (guildIndex !== -1) {\n                temp[index] = guilds[guildIndex]\n            }\n        })\n        for (let i = guilds.length - 1; i >= 0; --i) {\n            const g = guilds[i]\n            if (!temp.includes(g)) temp.unshift(g)\n        }\n        guilds = temp\n    }\n\n    client.setGuilds(guilds)\n    setGuilds(guilds)\n\n    //client.setUsers(d.users)\n\n    console.log(`Logged in as: ${user.username}#${user.discriminator}`)\n\n    client.emit('ready')\n\n    return true;\n}"],"sourceRoot":""}